================================================================================
command
================================================================================
.PS
x = 14
command ".ds string x is " x "."
.PE
\*[string]

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (assignment
      (variable)
      (expr
        (number))))
  (element
    (command
      (print_args
        (print_arg
          (text))
        (print_arg
          (expr
            (variable)))
        (print_arg
          (text)))))
  (element
    (command_line))
  (element
    (command_line)))

================================================================================
print
================================================================================
.PS
x = 14
print "x is " x "."
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (assignment
      (variable)
      (expr
        (number))))
  (element
    (print
      (print_args
        (print_arg
          (text))
        (print_arg
          (expr
            (variable)))
        (print_arg
          (text)))))
  (element
    (command_line)))

================================================================================
sh with braces and no command
================================================================================
.PS
sh {}
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (sh))
  (element
    (command_line)))

================================================================================
sh with braces and a single command
================================================================================
.PS
sh { echo "foo" }
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (sh
      (shell_command)))
  (element
    (command_line)))

================================================================================
sh with braces and multiple commands
================================================================================
.PS
sh { echo "foo"; echo "bar" }
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (sh
      (shell_command)))
  (element
    (command_line)))

================================================================================
sh with braces and multiple command lines
================================================================================
.PS
sh {
echo "foo"
echo "bar"
}
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (sh
      (shell_command)))
  (element
    (command_line)))

================================================================================
sh with braces and a string containg a closing brace
================================================================================
.PS
sh { echo "}" }
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (sh
      (shell_command)))
  (element
    (command_line)))

================================================================================
sh with braces and balanced braces inside
================================================================================
.PS
sh { echo {} }
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (sh
      (shell_command)))
  (element
    (command_line)))

================================================================================
sh with another delimiter
================================================================================
.PS
sh ! echo "foo" !
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (sh
      (shell_command)))
  (element
    (command_line)))

================================================================================
sh with another delimiter and multiple command lines
================================================================================
.PS
sh !
  echo "foo"
  echo "bar"
!
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (sh
      (shell_command)))
  (element
    (command_line)))

================================================================================
sh with letter as delimiter and multiple command lines
================================================================================
.PS
sh X
  echo "foo"
  echo "bar"
X
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (sh
      (shell_command)))
  (element
    (command_line)))

================================================================================
copy "file"
================================================================================
.PS
copy "file"
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (copy
      (filename
        (text))))
  (element
    (command_line)))

================================================================================
copy thru macro-name
================================================================================
.PS
copy thru foo
0
10
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (copy
      (macroname)
      (data_table)))
  (element
    (command_line)))

================================================================================
copy thru strange macro-name
================================================================================
.PS
copy thru XfooX
0 0 .05
1 1 .1
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (copy
      (macroname)
      (data_table)))
  (element
    (command_line)))

================================================================================
copy thru macro-name with empty data
================================================================================
.PS
copy thru do_circle
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (copy
      (macroname)))
  (element
    (command_line)))

================================================================================
copy thru macro-name until text
================================================================================
.PS
copy thru foo until "END"
1
10
END
box
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (copy
      (macroname)
      (data_table_tag)
      (data_table)))
  (element
    (primitive))
  (element
    (command_line)))

================================================================================
copy thru strange macro-name until text
================================================================================
.PS
copy thru foof until "END"
0 0 .05
1 1 .1
END
box
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (copy
      (macroname)
      (data_table_tag)
      (data_table)))
  (element
    (primitive))
  (element
    (command_line)))

================================================================================
copy thru macro-text
================================================================================
.PS
copy thru { circle rad $3 at $1,$2 }
0 0 .05
1 1 .1
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (copy
      (macro_definition
        (delimited_block))
      (data_table)))
  (element
    (command_line)))

================================================================================
copy thru macro-text with another delimiter
================================================================================
.PS
copy thru X circle rad $3 at $1,$2 X
0 0 .05
1 1 .1
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (copy
      (macro_definition
        (delimited_block))
      (data_table)))
  (element
    (command_line)))

================================================================================
copy thru macro-text until text
================================================================================
.PS
copy thru { circle rad $3 at $1,$2 } until "END"
0 0 .05
1 1 .1
END
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (copy
      (macro_definition
        (delimited_block))
      (data_table_tag)
      (data_table)))
  (element
    (command_line)))

================================================================================
copy thru macro-text until text with empty data
================================================================================
.PS
copy thru { circle rad $3 at $1,$2 } until "END"
END
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (copy
      (macro_definition
        (delimited_block))
      (data_table_tag)
      (data_table)))
  (element
    (command_line)))

================================================================================
copy thru corner case with line size equal tag length
================================================================================
.PS
copy thru XX
1 2
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (copy
      (macroname)
      (data_table)))
  (element
    (command_line)))

================================================================================
for loop
================================================================================
.PS
for i = 1 to 5 do {
  print i
}
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (for
      (variable)
      (expr
        (number))
      (expr
        (number))
      (delimited
        (element
          (print
            (print_args
              (print_arg
                (expr
                  (variable)))))))))
  (element
    (command_line)))

================================================================================
for loop using additive steps
================================================================================
.PS
for i = 1 to 5 by 2 do {
  print i
}
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (for
      (variable)
      (expr
        (number))
      (expr
        (number))
      (expr
        (number))
      (delimited
        (element
          (print
            (print_args
              (print_arg
                (expr
                  (variable)))))))))
  (element
    (command_line)))

================================================================================
for loop using multiplicative steps
================================================================================
.PS
for i = 1 to 5 by * 2 do {
  print i
}
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (for
      (variable)
      (expr
        (number))
      (expr
        (number))
      (expr
        (number))
      (delimited
        (element
          (print
            (print_args
              (print_arg
                (expr
                  (variable)))))))))
  (element
    (command_line)))

================================================================================
for loop with delimited block in next line
================================================================================
.PS
for i = 1 to 5 do
{
  print i
}
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (for
      (variable)
      (expr
        (number))
      (expr
        (number))
      (delimited
        (element
          (print
            (print_args
              (print_arg
                (expr
                  (variable)))))))))
  (element
    (command_line)))

================================================================================
if then
================================================================================
.PS
if 1 == 1 then
{
  print "foo"
}
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (if
      (expr
        (expr
          (number))
        (expr
          (number)))
      (delimited
        (element
          (print
            (print_args
              (print_arg
                (text))))))))
  (element
    (command_line)))

================================================================================
if then else
================================================================================
.PS
if 1 == 1 then {
  print "foo"
} else {
  print "bar"
}
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (if
      (expr
        (expr
          (number))
        (expr
          (number)))
      (delimited
        (element
          (print
            (print_args
              (print_arg
                (text))))))
      (delimited
        (element
          (print
            (print_args
              (print_arg
                (text))))))))
  (element
    (command_line)))

================================================================================
if one-liner
================================================================================
.PS
if 1 == 1 then { print "foo" }
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (if
      (expr
        (expr
          (number))
        (expr
          (number)))
      (delimited
        (element
          (print
            (print_args
              (print_arg
                (text))))))))
  (element
    (command_line)))

================================================================================
reset all variables
================================================================================
.PS
reset
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (reset))
  (element
    (command_line)))

================================================================================
reset one variable
================================================================================
.PS
reset scale
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (reset
      (variable)))
  (element
    (command_line)))

================================================================================
reset two variables
================================================================================
.PS
reset boxwid boxht
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (reset
      (variable)
      (variable)))
  (element
    (command_line)))

================================================================================
reset two variables with comma
================================================================================
.PS
reset boxwid,boxht
.PE

--------------------------------------------------------------------------------
(picture
  (element
    (command_line))
  (element
    (reset
      (variable)
      (variable)))
  (element
    (command_line)))
